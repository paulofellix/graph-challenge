{"version":3,"sources":["pages/Home.js","components/Employee.js","components/EmployeeList.js","pages/YearEvolution.js","pages/PercentByDepartment.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Component","Employee","state","data","labels","this","props","salaries","map","salary","date","datasets","label","borderWidth","setState","Container","Row","Col","style","display","flexDirection","justifyContent","alignItems","fontSize","fullname","es","EmployeeList","employees","employee","index","Employee_Employee","key","YearEvolution","employeesAux","Employees","RECORDS","el","gender","department","dt_dept_start","moment","toDate","dt_dept_end","dt_salary_start","dt_salary_end","salaryYear","getFullYear","employeesSorted","arraySort","unique","arrAux","filter","EmployeeList_EmployeeList","PercentByDepartment","employeesNames","departmentsNames","length","departmentsCosts","arrEmpDept","sum","forEach","parseInt","name","cost","companySumFinancial","App","baseURI","concat","process","react_router_dom","basename","Navbar","bg","expand","fixed","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","paddingTop","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73067810.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// import { Container } from './styles';\n\nexport default class Home extends Component {\n  render() {\n    return <div />;\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Line } from 'react-chartjs-2'\n\nexport default class Employee extends Component {\n\n    state = {\n        data: {}\n    }\n\n    componentWillMount (){\n        const labels = this.props.data.salaries.map(salary => salary.date)\n        const datasets = [{\n            label: 'Evolução Salarial',\n            data: this.props.data.salaries.map(salary => salary.salary),\n            borderWidth: 1\n        }]\n\n        const data = {\n            labels,\n            datasets: datasets\n        }\n\n        this.setState({data})\n    }\n\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col style={{display: 'flex', flexDirection: 'col', justifyContent: 'center', alignItems: 'center'}}>\n                        <span style={{fontSize: 30}}>{this.props.data.fullname}</span>\n                    </Col>\n                    <Col>\n                        <Line data={this.state.data} />\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Container} from 'react-bootstrap'\n\nimport Employee from './Employee'\n\nexport default class EmployeeList extends Component {\n  \n    state = {\n        employees: [],\n    }\n\n    render() {\n\n        const employees = this.props.employees.map((employee, index) => \n            <Employee key={index} data={employee}></Employee>)\n\n        return (\n            <Container>\n                {employees}\n            </Container>\n        )\n  }\n}\n","import React, { Component } from 'react';\nimport arraySort from 'array-sort'\nimport unique from 'array-unique'\nimport moment from 'moment'\n\nimport Employees from '../Employees.json'\nimport EmployeeList from  '../components/EmployeeList'\n\n\nexport default class YearEvolution extends Component {\n\n  state = {\n    employees: []\n  }\n\n  componentWillMount (){\n    const employeesAux = Employees.RECORDS.map(el => {\n      return {\n        fullname: el.fullname,\n        gender: el.gender,\n        department: el.department,\n        dt_dept_start: moment(el.dt_dept_start,'DD/MM/YYYY').toDate(),\n        dt_dept_end: moment(el.dt_dept_end,'DD/MM/YYYY').toDate(),\n        salary: el.salary,\n        dt_salary_start: moment(el.dt_salary_start,'DD/MM/YYYY').toDate(),\n        dt_salary_end: moment(el.dt_salary_end,'DD/MM/YYYY').toDate(),\n        salaryYear: moment(el.dt_salary_start,'DD/MM/YYYY').toDate().getFullYear()\n      }\n    })\n\n    const employeesSorted = arraySort(employeesAux, ['fullname','salaryYear'])\n    const employeesNames = unique(employeesSorted.map(el => el.fullname))\n    \n    const employees = employeesNames.map(fullname => {\n\n      const arrAux = employeesSorted.filter(el => \n        fullname === el.fullname)\n      \n      const salaries = unique(arrAux.map(el => {\n        return {\n          salary: el.salary, \n          date: el.salaryYear,\n          department: el.department\n        }\n      }))\n\n      const employee = {\n        fullname: fullname,\n        salaries: salaries\n      }\n\n      return employee\n    })\n\n    this.setState({\n        employees\n    })\n  }\n\n  render() {\n    return (\n      <EmployeeList employees={this.state.employees} />\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport arraySort from 'array-sort'\nimport unique from 'array-unique'\n\nimport Employees from '../Employees.json'\nimport moment from 'moment'\n\nimport { Bar } from 'react-chartjs-2'\n\nexport default class PercentByDepartment extends Component {\n\n  state = {\n    data: {}\n  }\n\n  componentWillMount (){\n    const employeesAux = Employees.RECORDS.map(el => {\n      return {\n        fullname: el.fullname,\n        gender: el.gender,\n        department: el.department,\n        dt_dept_start: moment(el.dt_dept_start,'DD/MM/YYYY').toDate(),\n        dt_dept_end: moment(el.dt_dept_end,'DD/MM/YYYY').toDate(),\n        salary: el.salary,\n        dt_salary_start: moment(el.dt_salary_start,'DD/MM/YYYY').toDate(),\n        dt_salary_end: moment(el.dt_salary_end,'DD/MM/YYYY').toDate(),\n        salaryYear: moment(el.dt_salary_start,'DD/MM/YYYY').toDate().getFullYear()\n      }\n    })\n\n    const employeesSorted = arraySort(employeesAux, ['fullname','salaryYear'])\n    const employeesNames = unique(employeesSorted.map(el => el.fullname))\n    const departmentsNames = unique(employeesSorted.map(el => el.department))\n    \n    const employees = employeesNames.map(fullname => {\n\n      const arrAux = employeesSorted.filter(el => \n        fullname === el.fullname)\n      \n      const salaries = unique(arrAux.map(el => {\n        return {\n          salary: el.salary, \n          date: el.salaryYear,\n          department: el.department\n        }\n      }))\n\n      const employee = {\n        fullname: fullname,\n        salary: salaries[salaries.length-1].salary,\n        department: salaries[salaries.length-1].department\n      }\n\n      return employee\n    })\n\n    const departmentsCosts = departmentsNames.map(department => {\n      const arrEmpDept = employees.filter(employee => \n        (employee.department === department)\n      )\n\n      let sum = 0;\n      arrEmpDept.forEach(employee => {\n        sum += parseInt(employee.salary)\n      })\n      \n      const result = {\n        name: department,\n        cost: sum\n      }\n\n      return result\n    })\n\n    let companySumFinancial = 0;\n    departmentsCosts.forEach(department => companySumFinancial += parseInt(department.cost))\n  \n    const labels = departmentsCosts.map(department => department.name)\n    const datasets = [{\n        label: `Percentual financeiro por Setor`,\n        data: departmentsCosts.map(department => department.cost/companySumFinancial),\n        borderWidth: 1\n    }]\n\n    const data = {\n        labels,\n        datasets: datasets\n    }\n\n    this.setState({data})\n  }\n\n  render() {\n    return (\n      <Bar data={this.state.data} />\n    )\n  }\n}\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\n\nimport Home from './pages/Home'\nimport YearEvolution from './pages/YearEvolution'\nimport PercentByDepartment from './pages/PercentByDepartment'\n\nfunction App() {\n\n  const baseURI = `${process.env.PUBLIC_URL}/`\n\n  return (\n    <HashRouter basename={baseURI}>\n      <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\">\n        <Navbar.Brand href={`${baseURI}#`}>Challenge</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href={`${baseURI}#/YearEvolution`}>Evolução Salarial</Nav.Link>\n            <Nav.Link href={`${baseURI}#/PercentByDepartment`}>Percentual financeiro por Departamento</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container style={{paddingTop: 75}}>\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/YearEvolution' component={YearEvolution} />\n          <Route path='/PercentByDepartment' component={PercentByDepartment} />\n        </Switch>\n      </Container>\n     </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}